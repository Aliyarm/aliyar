<!-- <div class="margin_content">
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <%= form_for @conn.params, Routes.admin_path(@conn, :exchanges_update), fn f -> %>
            <div class="flex gap-4">
                <button id="submit-btn" class="btn_save flex items-center justify-center" type="submit">
                    <span class="material-symbols-outlined" style="color: #fff; font-weight: 500; font-size: 20px;">
                        save
                    </span>
                    <%= gettext("Сохранить изменения") %>
                </button>
                <a href="/worker/course" class="btn_cancel flex items-center justify-center" type="submit">
                    <span class="material-symbols-outlined" style="color: #111111; font-weight: 500; font-size: 20px;">
                        cancel
                    </span>
                    <%= gettext("Отменить изменения") %>
                </a>
                <table class="w-full text-sm 2xl:text-xs text-left text-gray-500 table_sort">
                    <thead class="text-xs text-gray-700 uppercase bg-white">
                        <tr>
                            <th scope="col" class="p-6 2xl:p-4 border-b-2 border-gray-200 mob:hidden">
                                <%= gettext("Валюта") %>
                            </th>
                            <th scope="col" class="p-6 2xl:p-4 border-b-2 border-x-2 border-gray-200">
                                <%= gettext("Цена покупки") %>
                            </th>
                            <th scope="col" class="p-6 2xl:p-4 border-b-2 border-x-2 border-gray-200">
                                <%= gettext("Цена продажи") %>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <%= for item <- @exchanges do %>
                            <tr class="bg-white td-item">
                                <td class="px-6 py-4 border-t-2 mob:hidden">
                                    <%= item.currency %>
                                </td>
                                <td class="px-6 py-4 border-t-2 border-x-2 border-gray-200">
                                    <%= number_input f, :purchase, class: "input_full md:!w-32 number purchase" , value:
                                        item.purchase, step: "any" %>
                                </td>
                                <td class="px-6 py-4 border-x-2 border-t-2">
                                    <%= number_input f, :sale, class: "input_full md:!w-32 number sale" , value:
                                        item.sale, step: "any" %>
                                </td>
                            </tr>
                        <% end %>
                    </tbody>
                </table>
            </div>
        <% end %>
    </div>
</div>




<script>
    const numberInputs = document.querySelectorAll('.number');
    numberInputs.forEach(function (e) {
        let previousValue = '';
        e.addEventListener('input', () => {
            const currentValue = e.value;
            if (currentValue === '' || currentValue === '.' || currentValue === ',' || /^\d+(,\d{0,3})?(\.\d{0,3})?$/.test(currentValue)) {
                previousValue = currentValue;
            }
            else {
                e.value = previousValue;
            }
        });
    });


    const elementTd = Array.from(document.querySelectorAll(".td-item"));

    elementTd.forEach((el) => {
        const valueForPurchaseInput = el.querySelector(".purchase");
        const valueForSaleInput = el.querySelector(".sale");

        differenceInputs(valueForSaleInput, valueForPurchaseInput);
    });

    const buttonSubmit = document.querySelector("#submit-btn");
    let inputsArray = Array.from(document.querySelectorAll('input'));
    let isValid = true;

    function differenceInputs(oneInput, twoInput) {
        oneInput.addEventListener("input", handleInput);
        twoInput.addEventListener("input", handleInput);

        function handleInput() {
            let valueOne = parseFloat(oneInput.value.replace(/\s/, "").replace(",", ".") || 0);
            let valueTwo = parseFloat(twoInput.value.replace(/\s/, "").replace(",", ".") || 0);

            let isOneInputError = false;
            let isTwoInputError = false;

            if (isNaN(valueOne) || !(/^\d+(,\d{0,3})?(\.\d{0,3})?$/.test(oneInput.value))) {
                oneInput.style.border = "1px solid red";
                isOneInputError = true;
            } else {
                oneInput.style.border = "";
            }

            if (isNaN(valueTwo) || !(/^\d+(,\d{0,3})?(\.\d{0,3})?$/.test(twoInput.value))) {
                twoInput.style.border = "1px solid red";
                isTwoInputError = true;
            } else {
                twoInput.style.border = "";
            }

            if (isOneInputError || isTwoInputError) {
                buttonSubmit.disabled = true;
                return;
            }

            const lastCharIndexOne = oneInput.value.length - 1;
            const isLastCharDotOne = oneInput.value[lastCharIndexOne] === "." || oneInput.value[lastCharIndexOne] === ",";

            if (isLastCharDotOne && lastCharIndexOne > 0) {
                oneInput.style.border = "1px solid red";
                buttonSubmit.disabled = true;
                return;
            }

            const lastCharIndexTwo = twoInput.value.length - 1;
            const isLastCharDotTwo = twoInput.value[lastCharIndexTwo] === "." || twoInput.value[lastCharIndexTwo] === ",";

            if (isLastCharDotTwo && lastCharIndexTwo > 0) {
                twoInput.style.border = "1px solid red";
                buttonSubmit.disabled = true;
                return;
            }

            if (valueOne < valueTwo) {
                twoInput.style.border = "1px solid red";
                buttonSubmit.disabled = true;
            } else {
                oneInput.style.border = "";
                twoInput.style.border = "";
                inputsArray = Array.from(document.querySelectorAll('input'));
                const borderColorsArray = inputsArray.map(input => input.style.borderColor === "" ? true : false);
                isValid = borderColorsArray.every(value => value === true);

                if (isValid) {
                    oneInput.style.border = "";
                    twoInput.style.border = "";
                    buttonSubmit.disabled = false;
                }
            }
        }
    }
</script> -->